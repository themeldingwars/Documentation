//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: gtchunk compressed node
//   Authors: Arkii, Xsear
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local uint64 NODE_TAG_MAGIC = 0x12ED5A12ED5B12ED;

struct Node;

struct NodeHeader {
    uint64 magicTag<hidden=true>;
    uint nodeType;
    uint32 len;
};


struct vec3 {
    float x;
    float y;
    float z;
};

struct vec4 {
    float x;
    float y;
    float z;
    float w;
};

struct matrix4x4 {
    vec4 a<read=Vec4Display, optimize=false>;
    vec4 b<read=Vec4Display, optimize=false>;
    vec4 c<read=Vec4Display, optimize=false>;
    vec4 d<read=Vec4Display, optimize=false>;
};

// Geometry Node Data
//============================

struct GeoVertData {
    uint vertCount;
    vec3 verts[vertCount] <read=Vec3Display>;
};

struct indiceType1 {
    ushort a;
    ushort b;  
    ushort c;
};

struct indiceType2 {
    byte a;
    byte b;
    byte c;
};

struct indiceBlock {
    uint count;
    uint indiceType;

    if (indiceType == 393218) {
        indiceType1 indices[count];
    }
    else if (indiceType == 196609) {
        indiceType2 indices[count];
    }
    
};

struct matsDataBlock {
    uint count;
    uint id; // Might be type as well?
    byte data[count];
};

struct moppDataBlock {
    float floats[4];
    uint size;
    byte data[size];

    byte unk1;
    ushort unk2;

    uint numShorts;
    ushort shorts[numShorts];
};

struct GeometryData(uint nodeSize) {
    local uint startPos = FTell();    

    uint magic;
    ushort version; // ? should be 3
    ushort revision; // ? checked if less than 5
    uint unk1; // seems like a unique id
    uint numPhysicsMatIds;
    uint physicsMatIds[numPhysicsMatIds];

    struct GeoBlockStorage {
        uint numVertBlocks;
        GeoVertData vertBlocks[numVertBlocks] <optimize=false>;

        uint numIndiceBlocks;
        indiceBlock indiceBlocks[numIndiceBlocks] <optimize=false>;

        uint numMatItems;
        matsDataBlock matBlocks[numMatItems] <optimize=false>;

        uint numMoppBlocks;
        moppDataBlock moppBlocks[numMoppBlocks] <optimize=false>;
    } store <read=GeoStoreDisplay>;

    struct HavokData(uint havokSize) {
        local uint havocEndPos = FTell()+havokSize;
        uint64 havocBeginMagicTag;

        // type section
        local uint havocBeginPos = FTell();
        local uchar havocEndClassesTag[4];
        havocEndClassesTag[0] = 0x08;
        havocEndClassesTag[1] = 0x0a;
        havocEndClassesTag[2] = 0x40;
        havocEndClassesTag[3] = 0x0e;

        local uint havocClassesEndTagPos = FindFirst(havocEndClassesTag, true, false, 0, 0.0, 1, havocBeginPos);
        byte havokClasses[havocClassesEndTagPos-havocBeginPos];
        uint havokClassesEndTag;
        // --

        // data section 
        // try to parse some data based on common patterns
        local uchar havok04 = 0x04;
        local uint havokNext04Pos = FindFirst(havok04, true, false, 0, 0.0, 1, FTell()+1);
        byte havokUnk1[havokNext04Pos-FTell()+1];
    
        vec4 havokVector1<read=Vec4Display>; // hkpListShape aabbHalfExtents?
        vec4 havokVector2<read=Vec4Display>; // hkpListShape aabbCenter?
        
        local uchar havocUnk2Tag[3];
        havocUnk2Tag[0] = 0x18;
        havocUnk2Tag[1] = 0x06;
        havocUnk2Tag[2] = 0x02;
        local uint havocUnk2TagPos = FindFirst(havocUnk2Tag, true, false, 0, 0.0, 1, FTell());
        if ( havocEndPos > havocUnk2TagPos ) {
 
            byte havokUnk2[havocUnk2TagPos - FTell()+3]; // the bytes before the last three are interesting, are they 2 bytes per combined shape?
        
            matrix4x4 havokMatrix1<optimize=false>; // ?
            vec4 havokVector3<read=Vec4Display>; // often similiar to the previous two vectors
            vec4 havokVector4<read=Vec4Display>; // but not always
    
            if (store.numVertBlocks > 0) { // Protect against errors when guess mockering
                local uchar havok08 = 0x08;
                byte havokUnk_MaybeImportant[ FindFirst(havok08, true, false, 0, 0.0, 1, FTell()) - FTell() ];
                byte havokUnk_ShouldBe8_1;
                byte data_group1[ FindFirst(havok08, true, false, 0, 0.0, 1, FTell()+1) - FTell()];
                byte havokUnk_ShouldBe8_2;
                byte data_group2[ FindFirst(havok08, true, false, 0, 0.0, 1, FTell()+1) - FTell()];
                byte havokUnk_ShouldBe8_3;    
                
                local uchar havokUnk3SearchSequence1[13];
                havokUnk3SearchSequence1[0] = 0x06;
                havokUnk3SearchSequence1[1] = 0x00;
                havokUnk3SearchSequence1[2] = 0x00;
                havokUnk3SearchSequence1[3] = 0x00;
                havokUnk3SearchSequence1[4] = 0x00;
                havokUnk3SearchSequence1[5] = 0x00;
                havokUnk3SearchSequence1[6] = 0x00;
                havokUnk3SearchSequence1[7] = 0x00;
                havokUnk3SearchSequence1[8] = 0x00;
                havokUnk3SearchSequence1[9] = 0x00;
                havokUnk3SearchSequence1[10] = 0x00;
                havokUnk3SearchSequence1[11] = 0x00;
                havokUnk3SearchSequence1[12] = 0x00;

                local uint sequence1Spill = 1;
                local uint havokUnk3EndPos = FindFirst(havokUnk3SearchSequence1, true, false, 0, 0.0, 1, FTell());        
                
                if ( havocEndPos > havokUnk3EndPos ) {
                    byte havokUnk3[havokUnk3EndPos - FTell() + sequence1Spill ];
        
                    byte havokUnk4[ 12 * sizeof(data_group1) ]; // always 0x00?
                    struct transformMatrix {
                        vec4 translation<read=Vec4Display>;
                        vec4 rotation<read=Vec4Display>; // quaternion 
                        vec4 scale<read=Vec4Display>;
                    };
                    transformMatrix havokMatrix2[sizeof(data_group1)]<optimize=false>;
                
                    ushort unk4MaybeTagOrRef1;
                    byte unk5;
                }
            }
        }
    };
    
    local uint havokSize = nodeSize - (FTell() - startPos);
    HavokData havok(havokSize);

    local uint endPos = FTell(); 
    local uint leftSize = nodeSize - (endPos - startPos);
    byte havokLeftData[leftSize];
};

// Props Dode Data
//============================

struct PropsDataChunk(uint nodeSize) {
    local uint endOffset = FTell() + nodeSize;
    while( FTell() < endOffset ) {
        Node subNode<read=NodeDisplay>;
    }
};

struct PropNodeEntry_LightData {
    byte header[64];
    uint unk1;
    float unk2[6];
    uint unk4;
};

struct PropNodeEntry_AudioVolume {
    vec4 floats1<read=Vec4Display>;
    vec4 floats2<read=Vec4Display>;
    vec4 floats3<read=Vec4Display>;
    uint unk1;
    vec4 floats4<read=Vec4Display>;
    byte last[9];
};

struct PropNodeEntry_DecalInstances2 {
    uint decal_id;
    vec3 a<read=Vec3Display>;
    vec3 b<read=Vec3Display>;
    vec3 c<read=Vec3Display>;
    vec3 d<read=Vec3Display>; // best candidate for position!
    byte last[3];
};

struct PropNodeEntry_ParticleData {
    uint unk1;
    vec4 a<read=Vec4Display>;
    vec4 b<read=Vec4Display>;
    vec4 c<read=Vec4Display>;
    vec4 b<read=Vec4Display>;
    uint unk2;
    byte last[20];
};

// Mesh instances ?
//============================

struct MeshInstanceBlock {
    ushort count;
    ushort unk1;
    uint unk2;
    uint unk3;

    uint unk4;
    uint unk5;

    float unkFloat[6];
    uint64 unk6; // not on 262659 node id
    uint unk7;
    uint unk8;
    byte unk9[1100]; // some mat stuff sub_19B1220

    uint unk10;
};


struct MeshInstance2Block {
    ushort count_entries; // Probably tied to chunk sections, eg high lod sub chunks have fewer entries per instance
    ushort unk1; // "3"
    uint unk2; // "8"
    uint unk3; // "64"

    struct MeshInstanceEntry {
        uint idx; // chunk node index

        uint count1;
        if (count1 > 0) {
            struct count1Data {
                vec3 a<read=Vec3Display>;
                vec3 b<read=Vec3Display>;

                uint count2;
                if (count2 > 0) {
                    struct count2Data {

                        uint textureIdRelated; // this ones a bit confusing
            
                        // could easily be combined
                        byte twelvezero[12];
                        float tenfloats[10];
                        // --
                        
                        uint uint1_0; // first two bytes same as uint1_1 and uint1_2, maybe shorts 
                        uint uint2_0; // 0
        
                        uint matrixCount;
                        matrix4x4 matrix[matrixCount]<optimize=false>;
                    
                        
                        uint uint1_1; // same as uint1_2
                        uint uint2_1; // compressed data size?
                        byte data1_1[uint2_1];
                        
                        
                        uint uint1_2; // same as uint1_1
                        uint uint2_2; // compressed data size?
                        byte data1_2[uint2_2];
                        
                        // imagine this will break at some point
                        uint unknown_value;
                        byte maybe_flags[2];
                        // --
            
        
                        uint uint1_3;
                        uint uint2_3; // compressed data size?
                        byte data1_3[uint2_3];
        
                        uint uint1_4;
                        uint uint2_4; // compressed data size?
                        byte data1_4[uint2_4];
                        
                        uint uint1_5;
                        uint uint2_5; // compressed data size?
                        byte data1_5[uint2_5];
        
        
                        uint data_last; // 0 (or yet another count?)
                        
                    };
                    count2Data c2data[count2]<optimize=false>;
                }
            };
            count1Data c1data[count1]<optimize=false>;
        }

        uint count_end;
        if (count_end > 0) {
            struct countEndData {
                float endtenfloats[10];
                byte endunk[8]; // looking like a bitfield
            };
            countEndData cenddata[count_end]<optimize=false>;
        }

    };
    MeshInstanceEntry entries[count_entries]<optimize=false>;
};



// Terrain Chunk 
//============================

struct TerrainChunk_type0 {
    uint unk1;
    uint unk2;
    uint unk3;
    vec3 vec; 
};

struct TerrainChunk_type3 {
    uint count;
    uint data[count];
};

struct TerrainChunk_type4(uint nodeSize) {
    uint nodeCount;
    struct T4Node {
        uint nodeIndex; // node index within a level
        uint nodeLevel; // node.mLevel <= cTerrainMaxChunkNodeLevel
        uint unk3; // flags?

        vec3 matrix[3] <read=Vec3Display>;
        float unk7;

        vec3 boundsMin <read=Vec3Display>;
        vec3 boundsMax <read=Vec3Display>;

        uint unk9; // Number of vertices?
        if (unk9 > 0) {
            byte unk10[16]; // ?

            uint unk11; // (unk15 * 3)
            ushort unk12;
    
            uint unk14_count;
            if (unk14_count != 0xffffffff) { // when node level is not 0?
                ushort unk14[unk14_count];
            }
        
            uint unk15; // Number of patch triangles?
        }

        byte haveMoreData;
        if (haveMoreData > 0) {
            uint materials[6]; // refmap?
            uint unk18_size; // client will attempt to allocate this number of bytes
        }
    };
    T4Node nodes[nodeCount] <read=T4NodeDisplay, optimize=false>;
    
    // this consumes all the bytes, but the divied up sections dont quite seem right when the count isn't 1
    struct T4NodeData_1(uint unk9, uint unk11) {
        byte sculpt_data[ 8 * (2 * unk9) ];
        byte lighting_data[ 6 * (unk9) ];
        byte data3[ (unk11 - 1) ];
        byte data4[ (unk11 - 1) ];
    };
    struct T4NodeData_2(uint unk18_size) {
        byte texturing_data[ unk18_size ]; 
    };
    local uint i;
    for (i = 0; i < nodeCount; i++) {
        if (nodes[i].unk9 > 0) {
            T4NodeData_1 t4nd1(nodes[i].unk9, nodes[i].unk11) <optimize=false>;
        }

        if (exists(nodes[i].unk18_size)) {
            T4NodeData_2 t4nd2(nodes[i].unk18_size) <optimize=false>;
        }
    }
};

struct TerrainChunk(uint nodeSize) {
    local uint endOffset = FTell() + nodeSize;
    while( FTell() < endOffset ) {
        Node subNode<read=NodeDisplay>;
    }
};

struct TerrainChunk_QuadTreeData(uint nodeSize) {
    byte unk[8];
    local uint endOffset = FTell() + nodeSize - 8;
    while( FTell() < endOffset ) {
        Node subNode<read=NodeDisplay>;
    }
};

// Vegetation Chunk
//============================

struct VegationChunk2Data {
    vec3 a;
    uint unk1;
    uint unk2;
    uint unk3;
    vec4 b;
    ushort unk4;
    vec4 c;
};


// Water Chunk 
//============================

struct WaterObjectChunkData {
    
    // eyeballed outline based on just 1 instance

    vec3 a<read=Vec3Display>; // three floats
    uint unk1;
    uint unk2;
    uint unk3;

    struct unkdata4 {
        float f;
        uint i;
    };
    unkdata4 unk4[5]; // five ?

    float unk5;
    uint unk6; // typical id value, maybe type
    uint unk7;

    uint unk8;
    vec3 unk9[unk8];

    uint unk10;
    float unk11[unk10*2];

    uint unk12;
    byte unk13[unk12*4];

    uint unk14;
    byte unk15[unk14*4];

    uint unk16;
    uint unk17;
    uint unk18;
    uint unk19;
    uint unk20;
    uint unk21;

    byte unk22[5]; // just taking a guess, needed to offset by 1

    uint unk23;
    uint unk24;
    float unk25[5]; // five ?
    
    byte unk26[ ( unk23 * unk24 ) * unk3  ]; // total guesswork calc

    vec4 unk27<read=Vec4Display>;
    vec4 unk28<read=Vec4Display>;
};


// SubZoneGrid
//============================

struct SubZoneGridData {
    uint unk1; // maybe some sort of flags
    uint unk2_gridsize; // 64
    uint subzone_ids_count;
    uint subzone_ids[subzone_ids_count];
    uint unk4_gridcount;
    byte grid_data[(unk2_gridsize*unk2_gridsize) * unk4_gridcount];
};



//============================

struct Node {
    uint64 magicTag<hidden=true>;
    enum <uint32> {
            Terrain = 262400, // parent, children are "terrain chunk layer"
                TerrainChunk_T0 = 0, // meta, init?
                TerrainChunk_Materials = 1, // parent, children are "terrain chunk material layer"
                    TerrainChunk_MaterialLayer = 5,
                TerrainChunk_QuadTree = 2, // has data and children, children are "terrain chunk quadtree layer"
                    TerrainChunk_BlendWeight = 8, // children are "terrain blend weight layer"
                        // BlendWeightLayer0 = 0, // id collision, need to handle separately
                        // BlendWeightLayer2 = 2, // id collision, need to handle separately
                    TerrainChunk_QuadTree_T9  = 9,
                    TerrainChunk_QuadTree_T11 = 11,
                    TerrainChunk_QuadTree_QQ1 = 1431655765,
                    TerrainChunk_QuadTree_QQ2 = 1465909240,
                    TerrainChunk_QuadTree_QQ3 = 2694881440,
                    TerrainChunk_QuadTree_QQ4 = 2854889994,
                    TerrainChunk_QuadTree_QQ5 = 4026523607,
                    TerrainChunk_QuadTree_QQ6 = 4152328087,
                TerrainChunk_T3 = 3, // list of terrain materials to load
                TerrainChunk_T4 = 4, // shape data?
            Geometry         = 262401, // main collision data?
            SubZoneGrid      = 262402,
            Geometry3        = 262403, // spawn closet blocking volume?
            PropEncNameReg2  = 262404, // seen in shared lod data,  "chunk prop encounter name registry"
            Geometry2        = 262405, // water area volume?
            PropsNode        = 262656, // parent, children are "prop type layer"
                PropType_Doodad           = 327680, // same id as zone files, probably same parsing then
                PropType_EnvironmentData  = 327681, // environment prop data, these ids are also in the zone files
                    DefaultEnvironmentLayer_0034  = 34,
                    DefaultEnvironmentLayer_0203  = 203,
                    DefaultEnvironmentLayer_0304  = 304, 
                    DefaultEnvironmentLayer_0401  = 401, 
                    DefaultEnvironmentLayer_0501  = 501, 
                    DefaultEnvironmentLayer_0601  = 601, 
                    DefaultEnvironmentLayer_0700  = 700, 
                    DefaultEnvironmentLayer_0900  = 900, 
                    DefaultEnvironmentLayer_0800  = 800, 
                    DefaultEnvironmentLayer_1000  = 1000,
                    DefaultEnvironmentLayer_1200  = 1200,
                    DefaultEnvironmentLayer_1300  = 1300,
                    DefaultEnvironmentLayer_1400  = 1400,
                PropType_ProbeData        = 327686,
                PropType_DecalInstances1  = 327688,
                PropType_ParticleData     = 327693, // Bit unsure, seems like it should have children
                PropType_LightData        = 327697,
                PropType_AudioVolume      = 327700,
                PropType_Monster          = 327703,
                PropType_DecalInstances2  = 327704,
            MeshInstance2    = 262659, // rocks/houses/containers/etc.
            PropEncNameReg   = 262660, // "chunk prop encounter name registry"
            VegationChunk    = 262661,
            OverlayChunk     = 262662,
            SectorsChunk     = 262663,
                SectorsEntry    = 327699,
            WaterObjectChunk = 262664,
            VegationChunk2   = 262665,
            MeshInstance     = 262672
            
        } nodeType;
        uint32 len;

    local uint64 startPos = FTell();

    if (nodeType == Geometry || nodeType == Geometry2 || nodeType == Geometry3) {
        GeometryData data(len);
        byte geoLeftData[len - sizeof(data)];
    }
    else if (nodeType == Terrain) {
        TerrainChunk data(len) <optimize=false>;
    }
    else if (nodeType == TerrainChunk_T0) {
        TerrainChunk_type0 data<optimize=false>;
    }
    else if (nodeType == TerrainChunk_QuadTree) {
        TerrainChunk_QuadTreeData data(len)<optimize=false>;
    }
    else if (nodeType == TerrainChunk_T3) {
        TerrainChunk_type3 data<optimize=false>;
    }
    else if (nodeType == TerrainChunk_T4) {
        TerrainChunk_type4 data(len)<optimize=false>;
    }
    
    else if (nodeType == PropsNode) {
        PropsDataChunk data(len);
    }
    else if (nodeType == PropType_LightData) {
        PropNodeEntry_LightData data;
        local uint remaining = len - sizeof(data);
        if (remaining > 0) {
            byte leftData[remaining];
        }
    }
    else if (nodeType == PropType_AudioVolume) {
        PropNodeEntry_AudioVolume data;
        local uint remaining = len - sizeof(data);
        if (remaining > 0) {
            byte leftData[remaining];
        }
    }
    else if (nodeType == PropType_DecalInstances2) {
        PropNodeEntry_DecalInstances2 data;
        local uint remaining = len - sizeof(data);
        if (remaining > 0) {
            byte leftData[remaining];
        }
    }
    else if (nodeType == PropType_ParticleData) {
        PropNodeEntry_ParticleData data;
        local uint remaining = len - sizeof(data);
        if (remaining > 0) {
            byte leftData[remaining];
        }
    }
    else if (nodeType == MeshInstance) {
        MeshInstanceBlock data;
        local uint remaining = len - sizeof(data);
        if (remaining > 0) {
            byte leftData[remaining];
        }
    }
    else if (nodeType == MeshInstance2) {
        MeshInstance2Block data;
        local uint remaining = len - sizeof(data);
        if (remaining > 0) {
            byte leftData[remaining];
        }
    }
    else if (nodeType == VegationChunk2) {
        VegationChunk2Data data;
        local uint remaining = len - sizeof(data);
        if (remaining > 0) {
            byte leftData[remaining];
        }
    }
    else if (nodeType == WaterObjectChunk) {
        WaterObjectChunkData data;
        local uint remaining = len - sizeof(data);
        if (remaining > 0) {
            byte leftData[remaining];
        }
    }
    else if (nodeType == SubZoneGrid) {
        SubZoneGridData data;
        local uint remaining = len - sizeof(data);
        if (remaining > 0) {
            byte leftData[remaining];
        }
    }
    else {
        byte data[len];
    }
};

while( FTell() < FileSize() ) {
    Node node<read=NodeDisplay>;
}

// display formating
string Vec3Display(vec3 &vec)
{
    string s;   
    SPrintf( s, "%f, %f, %f", vec.x, vec.y, vec.z );
    return s;
}

string Vec4Display(vec4 &vec)
{
    string s;   
    SPrintf( s, "%f, %f, %f, %f", vec.x, vec.y, vec.z, vec.w );
    return s;
}

string NodeDisplay(Node &node)
{
    string s;   
    SPrintf( s, "%s", EnumToString(node.nodeType));
    return s;
}

string T4NodeDisplay(T4Node &node)
{
    string s;   
    SPrintf( s, "Index: %i, Level: %i", node.nodeIndex, node.nodeLevel);
    return s;
}


string GeoStoreDisplay(GeoBlockStorage &store)
{
    string s;   
    SPrintf( s, "Vert: %i, Indice: %i, Mat: %i, Mopp: %i", store.numVertBlocks, store.numIndiceBlocks, store.numMatItems, store.numMoppBlocks);
    return s;
}
