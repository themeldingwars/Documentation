//------------------------------------------------
//--- 010 Editor Binary Template
//
//      File: .dw
//   Authors: Xsear
//  Category: Firefall
// File Mask: *.dw
//  ID Bytes: 
//------------------------------------------------

#include "_common_types.bt";

struct HEADER {
    byte bitfield[4]<comment="Changes depending on the debugweapon 0-10 value">;
};

enum <byte> DEBUG_TRACE_TYPE
{
    ERROR = 0,
    Spawn = 1,
    Bounce = 2,
    Posefile_Hit = 3,
    Ragdoll_Hit = 4,
    Ragdoll_Miss = 5,
    Impact = 6,
    Shot = 7,
    Detonate = 8,
    Timeout = 9,
    Validated = 10
};

struct TookDebugWeaponHit_Optional_1 {
    uint64 guid;
    Vec3f unk2;
    Vec4f unk3_quaternion;
    byte unk4; // sbyte
    byte unk5;
};

struct TookDebugWeaponHit_Optional_2 {
    uint64 guid;
    byte unk2_count;
    Matrix4x4 unk2[unk2_count];
};

struct TookDebugWeaponHit {
    DEBUG_TRACE_TYPE type;
    uint unk_traceId;
    //ushort unk_traceId_ref : 16;
    //ushort unk_traceId_rem : 16;
    uint time;
    ushort unk4;
    Vec3f Position;
    Vec3f Direction;
    uint unk7_id;

    byte have_unk8;
    if (have_unk8) {
        TookDebugWeaponHit_Optional_1 unk8;
    }

    byte have_unk9;
    if (have_unk9) {
        TookDebugWeaponHit_Optional_2 unk9;
    }
};

struct TRACE_MOVEMENT_DATA { // Maybe clientProjMem?
    byte unk1[4];

    Vec3f rayStart;
    Vec3f rayEnd;
    float weaponRange; // Matches the item attribute
    ushort unk2; // 300?
    
    byte unk3_1[6];
    byte unk3_3[28];
    uint unk3_ptr; // Looks like a memory address o_O

    byte bullet;
    byte unk_bullet_rest[3]; // maybe this is local_c?

    Vec3f unk4_vec3;

    uint damagePerRound;

    byte unk5[12];
    Vec3f unk6_vec3;

    uint weaponTemplateId;
    byte slotIndex;
    
    byte unk7[15];
};

struct TRACE {
    byte outerByte;
    if (outerByte == 1) {
        byte innerByte;
        uint unk_traceId;
        //ushort unk_traceId_ref : 16;
        //ushort unk_traceId_rem : 16;

        uint ammoTypeId;
        if (ammoTypeId != 0) {
            TRACE_MOVEMENT_DATA blob; // 0x88
        };

        byte clientDataCount;
        if (clientDataCount != 0) {
            TookDebugWeaponHit tdbwh_client[clientDataCount]<optimize=false>;
        }

        byte serverDataCount;
        if (serverDataCount != 0) {
            TookDebugWeaponHit tdbwh_server[serverDataCount]<optimize=false>;
        }
    };
};

struct FILE_DATA {
    ubyte maxSize<comment="debugweapon.maxSize">;
    while (FTell() < ( FileSize() - 4)) {
        TRACE t<optimize=false>;
    }
};

struct FOOTER {
    uint lastTraceCounter<comment="The value loops around when you exceed the maximum amount of traces. Zero if no traces.">;
};

struct FILE {
    HEADER hdr<name="Header">;
    FILE_DATA dat<name="Traces">;
    FOOTER ftr<name="Footer">;
} debugweapon;