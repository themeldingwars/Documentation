//------------------------------------------------
//--- 010 Editor Binary Template
//
//      File: .sdb
//   Authors: Freakbyte, ThiconZ, Xsear
//  Category: Firefall
// File Mask: *.sdb
//  ID Bytes: 5 00 00 00 5E [+1] 7A [+1]
//------------------------------------------------

struct HEADER {
    uint32 version;
    if (version != 5) {
        Printf("Unsupported SDB version!");
        Exit(-1);
    }
    uint magic<hidden=true>;
    time64_t timestamp;
    if (magic == 0xbe7afa5e) {
        uint patch;
        uint scramblerVersion;
        uint tableCount;
        uint tableOffsets[tableCount];
        byte scrambledData[FileSize() - FTell()];
        Printf("Data is obfuscated.\nDescramble the scrambledData and run the template on the output.\n");
        Exit(-1);
    }
    else if (magic == 0xda7aba5e) {
        uint tableCount;
        uint tableOffsets[tableCount];
    }
    else
    {
        Printf("Magic mismatch!");
        Exit(-1);
    }
};

enum <byte> DBTYPE
{
    Unknown = 0,
    Byte = 1, // U08
    UShort = 2, // U16
    UInt = 3, // U32
    ULong = 4, // U64
    SByte = 5, // S08
    Short = 6, // S16
    Int = 7, // S32
    Long = 8, // S64
    Float = 9, // F32
    Double = 10, // F64
    String = 11, // slString
    Vector2 = 12, // vec2
    Vector3 = 13, // vec3
    Vector4 = 14, // vec4
    Matrix4x4 = 15, // mat4
    Blob = 16, // slBlob
    Char = 17, // char
    Box3 = 18, // box3
    Vector2Array = 19, // slArray<vec2>
    Vector3Array = 19, // slArray<vec3>
    Vector4Array = 20, // slArray<vec4>
};

struct FIELD
{
    DBTYPE type;
    uint id;
    string name1; // base
    string name2; // qualified/unique/index?
    string name3;
    uint offset;
    int nullableIndex<comment="When not -1">;
};

struct CELL(FIELD &field)
{
    local byte type<hidden=true> = field.type;
    local string name<hidden=true> = field.name1;
    local int nullableIndex<hidden=true> = field.nullableIndex;
    switch (field.type) {
        case Byte:
            byte value;
            break;
        case UShort:
            ushort value;
            break;
        case UInt:
            uint value;
            break;
        case ULong:
            ulong value;
        case SByte:
            byte value;
            break;
        case Short:
            short value;
            break;
        case Int:
            int value;
            break;
        case Long:
            long value;
            break;
        case Float:
            float value;
            break;
        case Double:
            double value;
            break;
        case String:
            string value;
            break;
        case Vector2:
            float value[2];
            break;
        case Vector3:
            float value[3];
            break;
        case Vector4:
            float value[4];
            break;
        case Matrix4x4:
            float value[16];
            break;
        case Blob:
            ushort len;
            if (len > 0) {
                byte value[len];
            }
            break;
        case Char:
            char value;
            break;
        case Box3:
             float values[6];
            break;
        case Vector2Array:
            byte len;
            if (len > 0) {
                float values[len*2];
            }
            break;
        case Vector3Array:
            byte len;
            if (len > 0) {
                float values[len*3];
            }
            break;
        case Vector4Array:
            byte len;
            if (len > 0) {
                float values[len*4];
            }
            break;
        default:
            local string FIXME;
            SPrintf(  FIXME, "Help, encountered %i", field.type);
            break;
    };
};

struct TABLE 
{
    uint id;
    
    byte numFields;
    FIELD fields[numFields]<optimize=false, name="Field", read=FieldDisplay>;    

    int numDataBytes;
    int numDataAndNullableBytes<comment="When not -1">;
    uint numNullableFields;
    
    string sql_from; // printed as 'table' in the console
    string sql_orderby;
    string sql_where;
    string sql_more;

    uint unk3;

    uint row_count;    
    struct ROW {
        uint row_id;
        
        if (numNullableFields == 0)
        {
            local int i<hidden=true> = 0;
            for(i=0; i < numFields; i++)
            {
                CELL data(fields[i])<optimize=false, name="Cell", read=CellDisplay>;
            }
        }
        else
        {
            byte nullableBitfield; // TODO: Handle more than 1 byte
            local int i<hidden=true> = 0;
            for(i=0; i < numFields; i++)
            {
                if (fields[i].nullableIndex == -1 || ((1<<fields[i].nullableIndex) & nullableBitfield) != 0) {
                    CELL data(fields[i])<optimize=false, name="Cell", read=CellDisplay>;
                }
            }
        }
    };
    
    if (row_count > 0) {
        ROW rows[row_count]<optimize=false, name="Row", read=RowDisplay>;
    }
};

struct DATA(HEADER &hdr)
{
    local int i<hidden=true> = 0;
    for(i=0; i < hdr.tableCount; i++)
    {
        FSeek(hdr.tableOffsets[i]);
        TABLE table<name="Table", read=TableDisplay>;
    }
};

struct FILE {
    uint versionCheck<hidden=true>;
    FSeek(-4);
    
    if (versionCheck == 5)
    {
        HEADER hdr<name="Header">; 
        DATA data(hdr)<name="Data">;
    }
    else
    {
        // 1265 descrambled
        local int tableCount<hidden=true> = 306;
        local int i<hidden=true> = 0;
        for(i=0; i < tableCount; i++)
        {
            TABLE table<name="Table", read=TableDisplay>;
        }
    }
} sdb;


string TableDisplay(TABLE &table)
{
    string s;
    if (table.numDataAndNullableBytes != -1) {
        SPrintf( s, "NULLABLES! %s", table.sql_from);
    }
    else {
        SPrintf( s, "%s", table.sql_from);
    }
    
    return s;
}

string FieldDisplay(FIELD &field)
{
    string s;   
    SPrintf( s, "%s (Type %i)", field.name1, field.type);
    if (field.nullableIndex != -1) {
        SPrintf( s, "%s (NullableIdx %i)", s, field.nullableIndex);
    }
    return s;
}

string RowDisplay(ROW &row)
{
    string s;   
    SPrintf( s, "%i", row.row_id);
    return s;
}

string CellDisplay(CELL &cell)
{
    string s;   
    SPrintf( s, "%s (Type %i)", cell.name, cell.type);
    if (cell.nullableIndex != -1) {
        SPrintf( s, "%s (NullableIdx %i)", s, cell.nullableIndex);
    }
    return s;
}