//------------------------------------------------
//--- 010 Editor Binary Template
//
//      File: .sdb
//   Authors: Freakbyte, ThiconZ, Xsear
//  Category: Firefall
// File Mask: *.sdb
//  ID Bytes: [+4] 5E BA 7A DA // "DATABASE"
//------------------------------------------------

struct HEADER {
    uint32 version;
    if (version != 5) {
        Printf("WARNING - Unsupported SDB version!");
        Exit(-1);
    }
    char magic[4]<hidden=true>;
    time_t timestamp;
    uint unknown;
    uint tableCount;
    if (tableCount > 1189) {
        Printf("WARNING - Probably cannot parse this SDB.");
        uint flags; // ?
        uint actualTableCount;
        uint tableOffsets[actualTableCount];
        Exit(-1);
    }
    else {
        uint tableOffsets[tableCount];
    }
};

enum <byte> DBTYPE
{
    Unknown = 0,
    Byte = 1,
    UShort = 2,
    UInt = 3,
    ULong = 4,
    SByte = 5,
    Short = 6,
    Int = 7,
    Long = 8,
    Float = 9,
    Double = 10,
    String = 11,
    Vector2 = 12,
    Vector3 = 13,
    Vector4 = 14,
    Matrix4x4 = 15,
    Blob = 16,
    Box3 = 17, // Seems like it might be the wrong label
    Vector2Array = 18,
    Vector3Array = 19, // Seems to be Vector2Array
    Vector4Array = 20,
    AsciiChar = 21,
    ByteArray = 22,
    UShortArray = 23,
    UIntArray = 24,
    HalfMatrix4x3 = 25,
    Half = 26,
};

struct FIELD
{
    DBTYPE type;
    uint id;
    string name1;
    string name2;
    string name3;
    uint offset;
    int unk_fence<comment="When not 0xFFFFFFFF this messes up the logic. Possibly some form of padding for rows.">;
};

struct CELL(FIELD &field)
{
    local byte type<hidden=true> = field.type;
    local string name<hidden=true> = field.name1;
    switch (field.type) {
        case Byte:
            byte value;
            break;
        case UShort:
            ushort value;
            break;
        case UInt:
            uint value;
            break;
        case ULong:
            ulong value;
        case SByte:
            byte value;
            break;
        case Short:
            short value;
            break;
        case Int:
            int value;
            break;
        case Long:
            long value;
            break;
        case Float:
            float value;
            break;
        case Double:
            double value;
            break;
        case String:
            string value;
            break;
        case Vector2:
            float value[2];
            break;
        case Vector3:
            float value[3];
            break;
        case Vector4:
            float value[4];
            break;
        case Matrix4x4:
            float value[16];
            break;
        case Box3:
            byte value; // FIXME: Probably a length?
            break;
        case Vector3Array:
            byte len;
            if (len > 0) {
                float values[len*2];
            }
            break;
        default:
            local string FIXME;
            SPrintf(  FIXME, "Help, encountered %i", field.type);
            //Printf(FIXME);
            break;
    };
};

struct TABLE 
{
    uint id;
    
    byte numFields;
    FIELD fields[numFields]<optimize=false, name="Field", read=FieldDisplay>;    

    uint unk1;
    int unk_fence<comment="When not 0xFFFFFFFF this messes up the logic. Possibly some form of padding for rows.">;
    uint unk2;
    string maybe_full_table_name;
    string maybe_primary_key_name;
    string sql_wtf_1;
    string sql_wtf_2;
    uint unk3;

    uint row_count;    
    struct ROW {
        uint row_id;
        local int i<hidden=true> = 0;
        for(i=0; i < numFields; i++)
        {
            CELL data(fields[i])<optimize=false, name="Cell", read=CellDisplay>;
        }
    };
    
    if (row_count > 0) {
        ROW rows[row_count]<optimize=false, name="Row", read=RowDisplay>;
    }
};

struct DATA(HEADER &hdr)
{
    local int i<hidden=true> = 0;
    for(i=0; i < hdr.tableCount; i++)
    {
        FSeek(hdr.tableOffsets[i]);
        TABLE table<name="Table", read=TableDisplay>;
    }
};

struct FILE {
    HEADER hdr<name="Header">;
    DATA data(hdr)<name="Data">;
} sdb;


string TableDisplay(TABLE &table)
{
    string s;
    if (table.unk_fence != -1) {
        SPrintf( s, "BAD PARSING! %s", table.maybe_full_table_name);
    }
    else {
        SPrintf( s, "%s", table.maybe_full_table_name);
    }
    
    return s;
}

string FieldDisplay(FIELD &field)
{
    string s;   
    SPrintf( s, "%s (Type %i)", field.name1, field.type);
    return s;
}

string RowDisplay(ROW &row)
{
    string s;   
    SPrintf( s, "%i", row.row_id);
    return s;
}

string CellDisplay(CELL &cell)
{
    string s;   
    SPrintf( s, "%s (Type %i)", cell.name, cell.type);
    return s;
}



