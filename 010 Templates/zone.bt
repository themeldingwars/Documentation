//------------------------------------------------
//--- 010 Editor Binary Template
//
//      File: .zone
//   Authors: FallenAvatar, Xsear
//  Category: Firefall
// File Mask: *.zone
//  ID Bytes: 5A 4F 4E 45 // ZONE
//------------------------------------------------

struct HEADER {
    char magic[4]<hidden=true>;
    int32 version;
    uint64 microTS;
    uint32 nameLen<hidden=true>;
    char name[nameLen];
} hdr<name="Header">;

local uint64 NODE_MAGIC_HEADER = 0x12ED5A12ED5B12ED;


struct DataUnkBytes(int dataSize) {
    byte data[dataSize]<name="Bytes">;
};

struct LengthDefinedString {
    uint32 len;
    char str[len];
};

struct Vec31 {
    int32 X<name="X">;
    int32 Y<name="Y">;
    int32 Z<name="Z">;
};

struct Vec2f {
    float X<name="X">;
    float Y<name="Y">;
};

struct Vec3f {
    float X<name="X">;
    float Y<name="Y">;
    float Z<name="Z">;
};

struct Vec4f {
    float X<name="X">;
    float Y<name="Y">;
    float Z<name="Z">;
    float W<name="W">;
};

struct Mat44f {
    float row1[4];
    float row2[4];
    float row3[4];
    float row4[4];
};

struct DataU001 {
    float data[6];
};

struct DataU002 {
    uint32 data;
};

struct DataU004 {
    float data[6];
};

struct DataU004_1710 {
    float data[3];
};


struct DataU007 {
    float data[7];
    uint16 data2;
    float data3;
};

struct ChunkZoneRange {
    uint32 cubeface;
    uint32 min_chunk_x;
    uint32 max_chunk_x;
    uint32 min_chunk_y;
    uint32 max_chunk_y;
};

struct ChunkRef {
    uint32 chunk_x;
    uint32 chunk_y;
    uint32 chunk_record_id;
};

struct ChunkRef2 {
    uint32 chunk_x;
    uint32 chunk_y;
};

struct Doodad {
    uint32 prop_record_id;
    Vec4f transform[4];
    uint32 unk3;
    uint32 unk4;
    int32 unk5;
    int32 unk6;
    int32 unk7;
    int32 unk8;
    float unk9[5];
};

struct MeldingPerimiterSet {
    uint32 nameLen<hidden=true>;
    char name[nameLen];
    uint32 controlPoints;
    uint32 bitfieldBitLength;
    byte bitfield[Ceil(bitfieldBitLength/8.0)];
    uint32 unk1;
    uint32 perimiterCount<hidden=true>;
    LengthDefinedString perimiters[perimiterCount] <optimize=false>;
        
    byte unk2;
    if (unk2 != 0) {
        //DataUnkBytes data(8)<name="UnknownData3">;
    }
};

struct PathStep {
    float position[3];
    float orientation[4];
    uint actionLen<hidden=true>;
    if (actionLen > 0) {   
        char action[actionLen];
    }
};

struct Path {
    uint cce_id;
    uint unk1;
    uint stepsCount<hidden=true>;
    PathStep steps[stepsCount] <optimize=false>;
};

struct CameraSequence {
    // WIP
    uint cce_id;
    byte unk1;
    uint nameLen<hidden=true>;
    char name[nameLen];
    
    Vec3f vec1;
    Vec3f vec2;
    Vec3f vec3;
    Vec3f vec4;

    ushort cameraNodesCount;
    ushort cameraShotsCount;
    ushort cameraShakesCount;
    ushort cameraFadesCount;
    ushort colorGradingsCount;
    ushort npcsCount;
    ushort dialogScriptsCount;
    ushort soundEventsCount;
    ushort pfxsCount;
    ushort lightsCount;
    
    struct CameraNode {
        uint nameLen<hidden=true>;
        char name[nameLen];
        Vec3f vec1;
        Vec3f vec2;
        Vec3f vec3;
        Vec3f vec4;
    
        uint unk1;
        if (unk1 == 5) {
            uint targetBone1Len<hidden=true>;
            char targetBone1[targetBone1Len]; // guess
            
            DataUnkBytes data(18)<name="UnknownDataCameraNode_1">;
            
            uint targetBone2Len<hidden=true>;
            char targetBone2[targetBone2Len]; // guess    
            
            DataUnkBytes data(30)<name="UnknownDataCameraNode_2">;
           
        }
        else {
            DataUnkBytes data(56)<name="UnknownDataCameraNode">;
        }


    };
    CameraNode cameraNodes[cameraNodesCount] <optimize=false>;

    struct CameraShot {
        uint nameLen<hidden=true>;
        char name[nameLen];
        DataUnkBytes data(33)<name="UnknownDataCameraShot">;
    };
    CameraShot cameraShots[cameraShotsCount] <optimize=false>;
    
    struct CameraShake {
        uint nameLen<hidden=true>;
        char name[nameLen];
        DataUnkBytes data(46)<name="UnknownDataCameraShake">;
    };
    CameraShake cameraShakes[cameraShakesCount] <optimize=false>;
    
    struct CameraFade {
        uint nameLen<hidden=true>;
        char name[nameLen];
        DataUnkBytes data(34)<name="UnknownDataCameraFade">;
    };
    CameraFade cameraFades[cameraFadesCount] <optimize=false>;

    // TODO: ColorGrading

    // WIP: NPC
    /*
    struct NPC {
       uint nameLen<hidden=true>;
       char name[nameLen];

       uint unk1;
        
       // not that sure about these vecs, mostly just stepping forward
       Vec3f vec1;
       Vec3f vec2;
       Vec3f vec3;
       Vec3f vec4;
       
       ushort unk2_MeshComponentRefCount;
       struct unk_MeshComponentRef {
         uint str1Len<hidden=true>;
         char str1[str1Len];
         DataUnkBytes data(4)<name="UnknownDataMeshComponentRef">;
       };
       unk_MeshComponentRef unk_MeshComponentRefs[unk2_MeshComponentRefCount] <optimize=false>;
    
       ushort unk3_MaybeContentFlags; // actions or something?
       if (unk3_MaybeContentFlags > 0) {
         if (unk3_MaybeContentFlags == 2) {
            uint unk4;
            ushort unk5;
            ushort unk6;
            ushort unk7;
            ushort unk7_2;
            float unk8;
            ushort unk9;
            uint str10Len;
            char str10[str10Len];
         }
         else if (unk3_MaybeContentFlags == 4) {
            uint unk4;
            ushort unk5;
            ushort unk6;
            ushort unk7;
            float unk8;
            ushort unk9;
            uint str10Len;
            char str10[str10Len];
         }
       }
       
    };
    if (npcsCount > 0) {
        NPC npcs[npcsCount] <optimize=false>;
    }
    */
    // TODO: DialogEvents
    // TODO: SoundEvents
    // TODO: PFXs
    // TODO: Lights
};

struct PropEncounterNameRegistry {
    uint32 propCount<hidden=true>;
    LengthDefinedString propNames[propCount] <optimize=false>;
};

struct WorldChunk {
    // This is exactly the same format as for CollisionGeometry in the gtchunk.payload.bt
    // WIP
    char magic[4];
    char version[4];
    //DataUnkBytes data(24)<name="WorldChunkData_1">;
    //uint32 moppFormatDataLen;
    //DataUnkBytes data(8+moppFormatDataLen)<name="MoppFormatData">;
    // yikes
};

struct ZoneTransferBounds {
    // WIP
    uint32 zoneID;
    uint32 unk1;
    // ...
};

struct WaterNode(uint nodeType, uint64 endOffset) {
    struct unk_flagdata {
        float a;
        uint b;
    };
    
    float position[3]; // origin
    
    uint unk2; // 0, 2 observed. doesn't seem to be a count.
    uint always_1;
    uint flags; // 4, 5, 7 observed
    
    if (flags & 0x01)
    {
        unk_flagdata fd_1;
    }

    if (flags & 0x02)
    {
        unk_flagdata fd_2[2];
    }    

    if (flags & 0x04)
    {
        // 0.25, 0.5, 0.75, 1
        unk_flagdata fd_3[4];
    }

    float f1[3]; // texture scaling related
    
    if (nodeType == TYPE_WATER_NODE) {
          uint waterdesc_sdb_id;    
          uint always_zero;
    }
    
    uint data1_count;
    Vec3f data1[data1_count]; // vec 3 data

    uint data2_count;
    Vec2f data2[data2_count]; // vec 2 data

    uint data3_count;
    uint data3[data3_count]; // maybe some data for the vec3s?

    uint data4_count;
    uint data4[data4_count]; // maybe some data for the vec2s?

    uint data5_count;
    uint data5[data5_count]; // some indexing or mapping data

    if (nodeType == TYPE_WATER_CHILD_NODE) {
          uint waterdesc_sdb_id;
    }

    byte moreData; // maybe a count?
    if (moreData > 0x00) {
        uint count6; // some x?
        uint count7; // some y?
        float f2[5];
        uint data6[count6*count7]; // data for that
    }
    
    if (nodeType == TYPE_WATER_NODE) {
        float f3[2];
        byte last[24];
    }
    
    if (nodeType == TYPE_WATER_CHILD_NODE) {
        if (FTell() < endOffset) {
            uint always_zero; // not present in 1710
        }
    }
};


struct NODE;
struct NODE
{
    uint64 magic_hdr<hidden=true>;
    enum <uint32> {
        // nodes == layers
        TYPE_ZONE_LAYER_PARENT = 196608,
            TYPE_U001_NODE = 135168, // 0x00100200 6 floats, forming 2 points, they are bottom left and top right of zone though not all the way to the edge.
            TYPE_SKYBOXRECORD_NODE = 131072, // 0x00000200
            TYPE_DEFAULT_ENVIRONMENT_LAYER_PARENT = 131328, // 0x00010200 all zones have this
                TYPE_U004_NODE = 10000, // 0x10270000 6 floats, forming 2 points. For some (indoor?) zones, they are the same.
                TYPE_U005_PARENT = 327681, // 0x01000500
                  TYPE_U006_NODE = 401, // 0x91010000 Scale? 22 floats/ints and 1 byte
                  TYPE_U007_NODE = 1300, // 0x14050000 8 floats + a short?
                  TYPE_U008_NODE = 1400, // 0x78050000 ??? alpha mask??
                  TYPE_U019_NODE = 33,
                  TYPE_U009_NODE = 34, // 0x22000000
                  TYPE_U010_NODE = 304, // 0x30010000 some kind of mat4x4?
                  TYPE_U011_NODE = 1000, // 0xE8030000 rotation?
                  TYPE_U012_NODE = 601, // 0x59020000
                  TYPE_U013_NODE = 203, // 0xCB000000 mat3x4?
                  TYPE_U020_NODE = 1100,
                  TYPE_U014_NODE = 1200, // 0xB0040000
                  TYPE_U015_NODE = 700, // 0xBC020000
                  TYPE_U016_NODE = 900, // 0x84030000
                  TYPE_U017_NODE = 800, // 0x20030000
                  TYPE_U018_NODE = 501, // 0xF5010000
            TYPE_MELDING_LAYER_PARENT = 131584, // 0x00020200
              TYPE_MELDING_PERIMITER_NODE = 5, // 0x05000000
            TYPE_PATH_NODE = 133120, // 0x00080200
            TYPE_MELDING_HEIGHT_MAP_DATA_NODE = 132864, // 0x00070200 large data blob
            TYPE_CHUNK_INFO_LAYER_PARENT = 132096, // 0x00040200
              TYPE_CHUNK_ZONE_RANGE_NODE = 65536, // 0x00000100
              TYPE_CHUNK_REF_NODE = 65793,        // 0x01010100
              TYPE_CHUNK_REF2_NODE = 65792,       // 0x00010100
            TYPE_WATER_NODE = 131840, // 0x00030200 large data blob
              TYPE_WATER_CHILD_NODE = 4,
            TYPE_WORLD_CHUNK_IMPORT_NODE = 133376, // 0x00090200
            TYPE_CAMERA_SEQUENCE_NODE = 136448, // 0x00150200
            TYPE_ZONE_TRANSFER_BOUNDS_NODE = 136704, // 0x00160200 large data blob
            TYPE_SUBZONE_REGION_NODE = 136960, // 0x00170200
            TYPE_PROP_ENCOUNTER_NAME_REGISTRY_NODE = 135680, // 0x00120200
            TYPE_PROP_TYPE_LAYER_PARENT = 136192, // 0x00140200
              TYPE_DOODAD_NODE = 327680, // 0x00000500 doodad
    } typeID<name="NodeType">;
    uint32 dataLen<name="DataLength">;

    uint64 check<hidden=true>;
    FSkip( -8 ); // "skip" backwards
    
    local uint64 end = FTell() + dataLen;    

    if( NODE_MAGIC_HEADER == check ) {
        while( FTell() < end ) {
            NODE children<name="Child">;
        }
    } else if( typeID == TYPE_U001_NODE ) {
        DataU001 data;
    } else if( typeID == TYPE_SKYBOXRECORD_NODE ) {
        uint skybox_record_id;
    } else if( typeID == TYPE_U004_NODE ) {
        if (dataLen > 12) {
            DataU004 data;
        }
        else {
            DataU004_1710 data;
        }
    /*
    } else if( typeID == TYPE_U007_NODE ) {
        DataU007 data;
    */
    } else if( typeID == TYPE_MELDING_PERIMITER_NODE ) {
        MeldingPerimiterSet data<name="MeldingPerimiterSet">;
    } else if( typeID == TYPE_PATH_NODE ) {
        Path data<name="Path">;
    } else if( typeID == TYPE_CHUNK_ZONE_RANGE_NODE ) {
        ChunkZoneRange data<name="ChunkZoneRange">;
    } else if( typeID == TYPE_CHUNK_REF_NODE ) {
        ChunkRef data<name="ChunkRef">;
    } else if( typeID == TYPE_CHUNK_REF2_NODE ) {
        ChunkRef2 data<name="ChunkRef2">;
    } else if( typeID == TYPE_WORLD_CHUNK_IMPORT_NODE ) {
        WorldChunk data<name="WorldChunk">;
    } else if( typeID == TYPE_CAMERA_SEQUENCE_NODE ) { 
        CameraSequence data<name="CameraSequence">;      
    } else if( typeID == TYPE_ZONE_TRANSFER_BOUNDS_NODE ) {
        ZoneTransferBounds data<name="ZoneTransferBounds">;
    } else if( typeID == TYPE_PROP_ENCOUNTER_NAME_REGISTRY_NODE ) {
        PropEncounterNameRegistry data<name="PropEncounterNameRegistry">;
    } else if( typeID == TYPE_DOODAD_NODE ) {
        Doodad data<name="Doodad">;
    } else if( typeID == TYPE_WATER_NODE || typeID == TYPE_WATER_CHILD_NODE ) {
        WaterNode data(typeID, end)<name="WaterNode">;
    } else {
        DataUnkBytes data(dataLen)<name="UnknownData">;
    }

    if ( FTell() < end ) {
        local uint64 remaining = end-FTell();
        DataUnkBytes data(remaining)<name="UnparsedData">;
    } 
};

NODE root<name="Root">;
